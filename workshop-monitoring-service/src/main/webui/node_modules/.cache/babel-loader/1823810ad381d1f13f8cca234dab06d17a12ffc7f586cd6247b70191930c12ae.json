{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{MonitoringApiService}from'../services/monitoringApi';/**\n * Custom hook for managing monitoring data and state\n * Provides real-time updates and error handling for the monitoring dashboard\n */export const useMonitoring=function(){let refreshInterval=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30000;const[systemHealth,setSystemHealth]=useState(null);const[agentStatuses,setAgentStatuses]=useState([]);const[systemSummary,setSystemSummary]=useState(null);const[serviceInfo,setServiceInfo]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[lastUpdated,setLastUpdated]=useState(null);/**\n   * Fetch all monitoring data\n   */const fetchMonitoringData=useCallback(async()=>{try{setError(null);// Fetch all data in parallel\nconst[healthData,agentsData,summaryData,infoData]=await Promise.all([MonitoringApiService.getSystemHealth(),MonitoringApiService.getAllAgentStatus(),MonitoringApiService.getSystemSummary(),MonitoringApiService.getServiceInfo()]);setSystemHealth(healthData);setAgentStatuses(agentsData);setSystemSummary(summaryData);setServiceInfo(infoData);setLastUpdated(new Date());}catch(err){console.error('Failed to fetch monitoring data:',err);setError(err.message||'Failed to fetch monitoring data');}finally{setLoading(false);}},[]);/**\n   * Trigger manual health check\n   */const triggerHealthCheck=useCallback(async()=>{try{setError(null);await MonitoringApiService.triggerHealthCheck();// Refresh data after triggering health check\nsetTimeout(()=>{fetchMonitoringData();},2000);// Wait 2 seconds for health check to complete\nreturn{success:true,message:'Health check triggered successfully'};}catch(err){console.error('Failed to trigger health check:',err);setError(err.message||'Failed to trigger health check');return{success:false,message:err.message};}},[fetchMonitoringData]);/**\n   * Get status of a specific agent\n   */const getAgentStatus=useCallback(async agentName=>{try{const agentData=await MonitoringApiService.getAgentStatus(agentName);return agentData;}catch(err){console.error(\"Failed to fetch status for agent \".concat(agentName,\":\"),err);throw err;}},[]);/**\n   * Refresh monitoring data manually\n   */const refreshData=useCallback(()=>{setLoading(true);fetchMonitoringData();},[fetchMonitoringData]);// Initial data fetch\nuseEffect(()=>{fetchMonitoringData();},[fetchMonitoringData]);// Set up automatic refresh interval\nuseEffect(()=>{if(refreshInterval>0){const interval=setInterval(()=>{fetchMonitoringData();},refreshInterval);return()=>clearInterval(interval);}},[fetchMonitoringData,refreshInterval]);// Derived state for dashboard metrics\nconst dashboardMetrics={totalAgents:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.total_agents)||0,healthyAgents:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.healthy_agents)||0,degradedAgents:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.degraded_agents)||0,unhealthyAgents:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.unhealthy_agents)||0,unknownAgents:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.unknown_agents)||0,overallStatus:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.overall_status)||'UNKNOWN',healthPercentage:(systemSummary===null||systemSummary===void 0?void 0:systemSummary.total_agents)>0?Math.round(systemSummary.healthy_agents/systemSummary.total_agents*100):0};// Agent status grouped by health status\nconst agentsByStatus={healthy:agentStatuses.filter(agent=>agent.health==='HEALTHY'),degraded:agentStatuses.filter(agent=>agent.health==='DEGRADED'),unhealthy:agentStatuses.filter(agent=>agent.health==='UNHEALTHY'),unknown:agentStatuses.filter(agent=>agent.health==='UNKNOWN')};// Response time statistics\nconst responseTimeStats={average:agentStatuses.length>0?Math.round(agentStatuses.reduce((sum,agent)=>sum+(agent.responseTimeMs||0),0)/agentStatuses.length):0,min:agentStatuses.length>0?Math.min(...agentStatuses.map(agent=>agent.responseTimeMs||0)):0,max:agentStatuses.length>0?Math.max(...agentStatuses.map(agent=>agent.responseTimeMs||0)):0};return{// Raw data\nsystemHealth,agentStatuses,systemSummary,serviceInfo,// State management\nloading,error,lastUpdated,// Actions\nrefreshData,triggerHealthCheck,getAgentStatus,// Derived data for dashboard\ndashboardMetrics,agentsByStatus,responseTimeStats};};export default useMonitoring;","map":{"version":3,"names":["useState","useEffect","useCallback","MonitoringApiService","useMonitoring","refreshInterval","arguments","length","undefined","systemHealth","setSystemHealth","agentStatuses","setAgentStatuses","systemSummary","setSystemSummary","serviceInfo","setServiceInfo","loading","setLoading","error","setError","lastUpdated","setLastUpdated","fetchMonitoringData","healthData","agentsData","summaryData","infoData","Promise","all","getSystemHealth","getAllAgentStatus","getSystemSummary","getServiceInfo","Date","err","console","message","triggerHealthCheck","setTimeout","success","getAgentStatus","agentName","agentData","concat","refreshData","interval","setInterval","clearInterval","dashboardMetrics","totalAgents","total_agents","healthyAgents","healthy_agents","degradedAgents","degraded_agents","unhealthyAgents","unhealthy_agents","unknownAgents","unknown_agents","overallStatus","overall_status","healthPercentage","Math","round","agentsByStatus","healthy","filter","agent","health","degraded","unhealthy","unknown","responseTimeStats","average","reduce","sum","responseTimeMs","min","map","max"],"sources":["/home/ec2-user/llama-stack-demos/workshop-monitoring-service/src/main/webui/src/hooks/useMonitoring.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { MonitoringApiService } from '../services/monitoringApi';\n\n/**\n * Custom hook for managing monitoring data and state\n * Provides real-time updates and error handling for the monitoring dashboard\n */\nexport const useMonitoring = (refreshInterval = 30000) => {\n  const [systemHealth, setSystemHealth] = useState(null);\n  const [agentStatuses, setAgentStatuses] = useState([]);\n  const [systemSummary, setSystemSummary] = useState(null);\n  const [serviceInfo, setServiceInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  /**\n   * Fetch all monitoring data\n   */\n  const fetchMonitoringData = useCallback(async () => {\n    try {\n      setError(null);\n      \n      // Fetch all data in parallel\n      const [healthData, agentsData, summaryData, infoData] = await Promise.all([\n        MonitoringApiService.getSystemHealth(),\n        MonitoringApiService.getAllAgentStatus(),\n        MonitoringApiService.getSystemSummary(),\n        MonitoringApiService.getServiceInfo()\n      ]);\n\n      setSystemHealth(healthData);\n      setAgentStatuses(agentsData);\n      setSystemSummary(summaryData);\n      setServiceInfo(infoData);\n      setLastUpdated(new Date());\n      \n    } catch (err) {\n      console.error('Failed to fetch monitoring data:', err);\n      setError(err.message || 'Failed to fetch monitoring data');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Trigger manual health check\n   */\n  const triggerHealthCheck = useCallback(async () => {\n    try {\n      setError(null);\n      await MonitoringApiService.triggerHealthCheck();\n      \n      // Refresh data after triggering health check\n      setTimeout(() => {\n        fetchMonitoringData();\n      }, 2000); // Wait 2 seconds for health check to complete\n      \n      return { success: true, message: 'Health check triggered successfully' };\n    } catch (err) {\n      console.error('Failed to trigger health check:', err);\n      setError(err.message || 'Failed to trigger health check');\n      return { success: false, message: err.message };\n    }\n  }, [fetchMonitoringData]);\n\n  /**\n   * Get status of a specific agent\n   */\n  const getAgentStatus = useCallback(async (agentName) => {\n    try {\n      const agentData = await MonitoringApiService.getAgentStatus(agentName);\n      return agentData;\n    } catch (err) {\n      console.error(`Failed to fetch status for agent ${agentName}:`, err);\n      throw err;\n    }\n  }, []);\n\n  /**\n   * Refresh monitoring data manually\n   */\n  const refreshData = useCallback(() => {\n    setLoading(true);\n    fetchMonitoringData();\n  }, [fetchMonitoringData]);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchMonitoringData();\n  }, [fetchMonitoringData]);\n\n  // Set up automatic refresh interval\n  useEffect(() => {\n    if (refreshInterval > 0) {\n      const interval = setInterval(() => {\n        fetchMonitoringData();\n      }, refreshInterval);\n\n      return () => clearInterval(interval);\n    }\n  }, [fetchMonitoringData, refreshInterval]);\n\n  // Derived state for dashboard metrics\n  const dashboardMetrics = {\n    totalAgents: systemSummary?.total_agents || 0,\n    healthyAgents: systemSummary?.healthy_agents || 0,\n    degradedAgents: systemSummary?.degraded_agents || 0,\n    unhealthyAgents: systemSummary?.unhealthy_agents || 0,\n    unknownAgents: systemSummary?.unknown_agents || 0,\n    overallStatus: systemSummary?.overall_status || 'UNKNOWN',\n    healthPercentage: systemSummary?.total_agents > 0 \n      ? Math.round((systemSummary.healthy_agents / systemSummary.total_agents) * 100)\n      : 0\n  };\n\n  // Agent status grouped by health status\n  const agentsByStatus = {\n    healthy: agentStatuses.filter(agent => agent.health === 'HEALTHY'),\n    degraded: agentStatuses.filter(agent => agent.health === 'DEGRADED'),\n    unhealthy: agentStatuses.filter(agent => agent.health === 'UNHEALTHY'),\n    unknown: agentStatuses.filter(agent => agent.health === 'UNKNOWN')\n  };\n\n  // Response time statistics\n  const responseTimeStats = {\n    average: agentStatuses.length > 0 \n      ? Math.round(agentStatuses.reduce((sum, agent) => sum + (agent.responseTimeMs || 0), 0) / agentStatuses.length)\n      : 0,\n    min: agentStatuses.length > 0 \n      ? Math.min(...agentStatuses.map(agent => agent.responseTimeMs || 0))\n      : 0,\n    max: agentStatuses.length > 0 \n      ? Math.max(...agentStatuses.map(agent => agent.responseTimeMs || 0))\n      : 0\n  };\n\n  return {\n    // Raw data\n    systemHealth,\n    agentStatuses,\n    systemSummary,\n    serviceInfo,\n    \n    // State management\n    loading,\n    error,\n    lastUpdated,\n    \n    // Actions\n    refreshData,\n    triggerHealthCheck,\n    getAgentStatus,\n    \n    // Derived data for dashboard\n    dashboardMetrics,\n    agentsByStatus,\n    responseTimeStats\n  };\n};\n\nexport default useMonitoring;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}