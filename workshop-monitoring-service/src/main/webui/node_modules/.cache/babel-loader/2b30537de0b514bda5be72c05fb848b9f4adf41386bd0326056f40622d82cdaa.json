{"ast":null,"code":"import axios from'axios';// Base API configuration\nconst API_BASE_URL=process.env.NODE_ENV==='production'?'/api/monitoring':'http://localhost:8086/api/monitoring';const api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor for logging\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url));return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>{console.log(\"API Response: \".concat(response.status,\" \").concat(response.config.url));return response;},error=>{var _error$response;console.error('API Response Error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});/**\n * Workshop Monitoring API Service\n * Provides methods to interact with the monitoring REST endpoints\n */export class MonitoringApiService{/**\n   * Get overall system health status\n   * @returns {Promise<Object>} System health data\n   */static async getSystemHealth(){try{const response=await api.get('/health');return response.data;}catch(error){console.error('Failed to fetch system health:',error);throw new Error('Unable to fetch system health status');}}/**\n   * Get status of all agents\n   * @returns {Promise<Array>} Array of agent status objects\n   */static async getAllAgentStatus(){try{const response=await api.get('/agents');return response.data;}catch(error){console.error('Failed to fetch agent statuses:',error);throw new Error('Unable to fetch agent statuses');}}/**\n   * Get status of a specific agent\n   * @param {string} agentName - Name of the agent\n   * @returns {Promise<Object>} Agent status data\n   */static async getAgentStatus(agentName){try{const response=await api.get(\"/agents/\".concat(agentName));return response.data;}catch(error){var _error$response2;if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){throw new Error(\"Agent '\".concat(agentName,\"' not found\"));}console.error(\"Failed to fetch status for agent \".concat(agentName,\":\"),error);throw new Error(\"Unable to fetch status for agent '\".concat(agentName,\"'\"));}}/**\n   * Get system summary for dashboard display\n   * @returns {Promise<Object>} System summary data\n   */static async getSystemSummary(){try{const response=await api.get('/summary');return response.data;}catch(error){console.error('Failed to fetch system summary:',error);throw new Error('Unable to fetch system summary');}}/**\n   * Trigger manual health check for all agents\n   * @returns {Promise<Object>} Health check trigger response\n   */static async triggerHealthCheck(){try{const response=await api.post('/health-check');return response.data;}catch(error){console.error('Failed to trigger health check:',error);throw new Error('Unable to trigger health check');}}/**\n   * Get service information and metadata\n   * @returns {Promise<Object>} Service info data\n   */static async getServiceInfo(){try{const response=await api.get('/info');return response.data;}catch(error){console.error('Failed to fetch service info:',error);throw new Error('Unable to fetch service information');}}}/**\n * Health status constants matching the backend enum\n */export const HealthStatus={HEALTHY:'HEALTHY',DEGRADED:'DEGRADED',UNHEALTHY:'UNHEALTHY',UNKNOWN:'UNKNOWN'};/**\n * Get health status color for UI display\n * @param {string} status - Health status\n * @returns {string} CSS color class or hex color\n */export const getHealthStatusColor=status=>{switch(status){case HealthStatus.HEALTHY:return'#10b981';// green-500\ncase HealthStatus.DEGRADED:return'#f59e0b';// amber-500\ncase HealthStatus.UNHEALTHY:return'#ef4444';// red-500\ncase HealthStatus.UNKNOWN:default:return'#6b7280';// gray-500\n}};/**\n * Get health status icon for UI display\n * @param {string} status - Health status\n * @returns {string} Icon name (for lucide-react)\n */export const getHealthStatusIcon=status=>{switch(status){case HealthStatus.HEALTHY:return'CheckCircle';case HealthStatus.DEGRADED:return'AlertTriangle';case HealthStatus.UNHEALTHY:return'XCircle';case HealthStatus.UNKNOWN:default:return'HelpCircle';}};export default MonitoringApiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","concat","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","MonitoringApiService","getSystemHealth","get","Error","getAllAgentStatus","getAgentStatus","agentName","_error$response2","getSystemSummary","triggerHealthCheck","post","getServiceInfo","HealthStatus","HEALTHY","DEGRADED","UNHEALTHY","UNKNOWN","getHealthStatusColor","getHealthStatusIcon"],"sources":["/home/ec2-user/llama-stack-demos/workshop-monitoring-service/src/main/webui/src/services/monitoringApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? '/api/monitoring' \n  : 'http://localhost:8086/api/monitoring';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Workshop Monitoring API Service\n * Provides methods to interact with the monitoring REST endpoints\n */\nexport class MonitoringApiService {\n  \n  /**\n   * Get overall system health status\n   * @returns {Promise<Object>} System health data\n   */\n  static async getSystemHealth() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch system health:', error);\n      throw new Error('Unable to fetch system health status');\n    }\n  }\n\n  /**\n   * Get status of all agents\n   * @returns {Promise<Array>} Array of agent status objects\n   */\n  static async getAllAgentStatus() {\n    try {\n      const response = await api.get('/agents');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch agent statuses:', error);\n      throw new Error('Unable to fetch agent statuses');\n    }\n  }\n\n  /**\n   * Get status of a specific agent\n   * @param {string} agentName - Name of the agent\n   * @returns {Promise<Object>} Agent status data\n   */\n  static async getAgentStatus(agentName) {\n    try {\n      const response = await api.get(`/agents/${agentName}`);\n      return response.data;\n    } catch (error) {\n      if (error.response?.status === 404) {\n        throw new Error(`Agent '${agentName}' not found`);\n      }\n      console.error(`Failed to fetch status for agent ${agentName}:`, error);\n      throw new Error(`Unable to fetch status for agent '${agentName}'`);\n    }\n  }\n\n  /**\n   * Get system summary for dashboard display\n   * @returns {Promise<Object>} System summary data\n   */\n  static async getSystemSummary() {\n    try {\n      const response = await api.get('/summary');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch system summary:', error);\n      throw new Error('Unable to fetch system summary');\n    }\n  }\n\n  /**\n   * Trigger manual health check for all agents\n   * @returns {Promise<Object>} Health check trigger response\n   */\n  static async triggerHealthCheck() {\n    try {\n      const response = await api.post('/health-check');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to trigger health check:', error);\n      throw new Error('Unable to trigger health check');\n    }\n  }\n\n  /**\n   * Get service information and metadata\n   * @returns {Promise<Object>} Service info data\n   */\n  static async getServiceInfo() {\n    try {\n      const response = await api.get('/info');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch service info:', error);\n      throw new Error('Unable to fetch service information');\n    }\n  }\n}\n\n/**\n * Health status constants matching the backend enum\n */\nexport const HealthStatus = {\n  HEALTHY: 'HEALTHY',\n  DEGRADED: 'DEGRADED',\n  UNHEALTHY: 'UNHEALTHY',\n  UNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Get health status color for UI display\n * @param {string} status - Health status\n * @returns {string} CSS color class or hex color\n */\nexport const getHealthStatusColor = (status) => {\n  switch (status) {\n    case HealthStatus.HEALTHY:\n      return '#10b981'; // green-500\n    case HealthStatus.DEGRADED:\n      return '#f59e0b'; // amber-500\n    case HealthStatus.UNHEALTHY:\n      return '#ef4444'; // red-500\n    case HealthStatus.UNKNOWN:\n    default:\n      return '#6b7280'; // gray-500\n  }\n};\n\n/**\n * Get health status icon for UI display\n * @param {string} status - Health status\n * @returns {string} Icon name (for lucide-react)\n */\nexport const getHealthStatusIcon = (status) => {\n  switch (status) {\n    case HealthStatus.HEALTHY:\n      return 'CheckCircle';\n    case HealthStatus.DEGRADED:\n      return 'AlertTriangle';\n    case HealthStatus.UNHEALTHY:\n      return 'XCircle';\n    case HealthStatus.UNKNOWN:\n    default:\n      return 'HelpCircle';\n  }\n};\n\nexport default MonitoringApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}