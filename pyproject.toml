[project]
name = "llama-stack-demos"
version = "0.1.0"
description = "llama-stack-demos with Workshop Template System"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "ipykernel==7.0.0a0",
    "llama-stack-client==0.2.10",
    "pre-commit>=4.2.0",
    "python-dotenv>=1.1.0",
    "streamlit>=1.44.1",
    "geocoder>=1.38.1",
    "llama-stack==0.2.10",
    "scipy>=1.15.2",
    "matplotlib>=3.10.3",
    # Workshop Template System dependencies
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.2",
    "requests>=2.31.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "click>=8.1.7",
    "PyYAML>=6.0.1",
    "Jinja2>=3.1.2",
    "markdown>=3.5.1",
    "GitPython>=3.1.40",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-html>=3.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "autopep8>=2.0.0",
    "autoflake>=2.0.0",
]

# =============================================================================
# CODE QUALITY TOOL CONFIGURATIONS
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | workshop-monitoring-service/src/main/webui/node_modules
  | workshop-monitoring-service/target
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = [
    "*/node_modules/*",
    "*/target/*",
    "*/.venv/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*.egg-info/*"
]
known_first_party = ["demos", "common", "workshop_template_system"]
known_third_party = [
    "fastapi",
    "uvicorn",
    "httpx",
    "requests",
    "pydantic",
    "click",
    "pytest",
    "yaml",
    "jinja2",
    "markdown",
    "git"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true
no_strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "demos.*"
ignore_errors = false
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--color=yes",
    "--durations=10"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests requiring multiple agents",
    "e2e: End-to-end tests with real repositories",
    "ollama: Tests requiring Ollama LLM integration",
    "slow: Tests that take more than 30 seconds",
    "middleware: Tests for Quarkus middleware integration",
    "agents: Tests for agent functionality",
    "pipelines: Tests for Tekton pipeline integration"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["demos", "common"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/target/*",
    "*/.venv/*",
    "*/venv/*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "node_modules", "target", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
