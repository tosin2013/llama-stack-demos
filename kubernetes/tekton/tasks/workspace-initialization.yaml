apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: workspace-initialization
  namespace: workshop-system
  labels:
    app: workshop-template-system
    component: workspace-management
    version: v1.0.0
spec:
  description: |
    Workspace Initialization Task (ADR-0007)
    Initializes shared workspace with base content based on workflow type.
    - Workflow 1: Clone showroom_template_default.git as base
    - Workflow 3: Clone original workshop repository for enhancement
    
  params:
  - name: workflow-type
    type: string
    description: Type of workflow (1 for new workshop, 3 for enhancement)
    default: "1"
  - name: repository-url
    type: string
    description: Source repository URL to clone
  - name: workshop-name
    type: string
    description: Workshop name for directory structure
  - name: base-template
    type: string
    description: Base template source (showroom_template_default or original_repository)
    default: "showroom_template_default"

  workspaces:
  - name: shared-data
    description: Shared workspace for workshop content

  results:
  - name: workspace-status
    description: Status of workspace initialization
  - name: content-path
    description: Path to workshop content in workspace
  - name: files-count
    description: Number of files initialized in workspace

  steps:
  - name: initialize-workspace
    image: registry.access.redhat.com/ubi8/ubi:latest
    script: |
      #!/bin/bash
      set -e
      
      echo "üöÄ Workspace Initialization (ADR-0007)"
      echo "======================================"
      echo "Workflow Type: $(params.workflow-type)"
      echo "Repository: $(params.repository-url)"
      echo "Workshop Name: $(params.workshop-name)"
      echo "Base Template: $(params.base-template)"
      echo ""
      
      # Install required tools
      dnf install -y git jq

      # Initialize coordinated workspace structure
      echo "üìÅ Initializing coordinated workspace structure..."
      PIPELINE_ID="$(params.workshop-name)-$(date +%s)"

      # Create pipeline-specific directory structure
      PIPELINE_DIR="/workspace/shared-data/pipelines/$PIPELINE_ID"
      mkdir -p "$PIPELINE_DIR"/{workspace-content,agent-artifacts/{content-creator,source-manager,template-converter},metadata/locks,final-output}

      # Create agent working directories
      mkdir -p /workspace/shared-data/agents/{content-creator,source-manager}/{working,cache}
      mkdir -p /workspace/shared-data/agents/shared-tools

      # Create shared directories
      mkdir -p /workspace/shared-data/shared/{templates,git-cache,coordination/resource-locks}

      # Initialize pipeline metadata
      cat > "$PIPELINE_DIR/metadata/pipeline-info.json" <<EOF
      {
        "pipeline_id": "$PIPELINE_ID",
        "start_time": "$(date -Iseconds)",
        "status": "initializing",
        "workflow_type": "$(params.workflow-type)",
        "repository_url": "$(params.repository-url)",
        "workshop_name": "$(params.workshop-name)",
        "workspace_version": "1.0.0"
      }
      EOF

      # Initialize agent status tracking
      cat > "$PIPELINE_DIR/metadata/agent-status.json" <<EOF
      {
        "template-converter": {"status": "pending", "start_time": null, "end_time": null},
        "content-creator": {"status": "pending", "start_time": null, "end_time": null},
        "source-manager": {"status": "pending", "start_time": null, "end_time": null}
      }
      EOF

      cd "$PIPELINE_DIR/workspace-content"
      
      # Initialize workspace based on workflow type
      if [ "$(params.workflow-type)" = "3" ]; then
        echo "üì• Workflow 3: Cloning original workshop repository"
        echo "Source: $(params.repository-url)"
        
        # Clone original workshop for enhancement
        git clone $(params.repository-url) .
        
        # Create metadata for enhancement workflow
        cat > "$PIPELINE_DIR/metadata/workflow-info.json" <<EOF
      {
        "workflow_type": "3",
        "strategy": "enhancement",
        "source_repository": "$(params.repository-url)",
        "workshop_name": "$(params.workshop-name)",
        "base_template": "original_repository",
        "initialization_time": "$(date -Iseconds)"
      }
      EOF
        
      else
        echo "üì• Workflow 1: Cloning showroom template"
        echo "Source: https://github.com/rhpds/showroom_template_default.git"
        
        # Clone showroom template for new workshop creation
        git clone https://github.com/rhpds/showroom_template_default.git .
        
        # Create metadata for creation workflow
        cat > "$PIPELINE_DIR/metadata/workflow-info.json" <<EOF
      {
        "workflow_type": "1",
        "strategy": "creation",
        "source_repository": "$(params.repository-url)",
        "workshop_name": "$(params.workshop-name)",
        "base_template": "showroom_template_default",
        "initialization_time": "$(date -Iseconds)"
      }
      EOF
        
      fi
      
      # Remove .git directory to avoid conflicts
      rm -rf .git
      
      # Count files and create summary
      FILES_COUNT=$(find . -type f | wc -l)
      echo ""
      echo "üìä Workspace Initialization Summary"
      echo "=================================="
      echo "Files initialized: $FILES_COUNT"
      echo "Content path: /workspace/shared-data/workshop-content"
      echo ""
      
      # Display directory structure
      echo "üìÇ Directory Structure:"
      tree -L 3 . || ls -la
      
      # Update pipeline status
      jq '.status = "initialized"' "$PIPELINE_DIR/metadata/pipeline-info.json" > "$PIPELINE_DIR/metadata/pipeline-info.json.tmp"
      mv "$PIPELINE_DIR/metadata/pipeline-info.json.tmp" "$PIPELINE_DIR/metadata/pipeline-info.json"

      # Write results
      echo "success" > $(results.workspace-status.path)
      echo "$PIPELINE_DIR/workspace-content" > $(results.content-path.path)
      echo "$FILES_COUNT" > $(results.files-count.path)
      
      echo ""
      echo "‚úÖ Workspace initialization completed successfully"
      echo "üéØ Ready for agent file-based operations"

  - name: validate-workspace
    image: registry.access.redhat.com/ubi8/ubi:latest
    script: |
      #!/bin/bash
      set -e
      
      echo "üîç Validating Workspace Content"
      echo "==============================="

      # Read paths from task results
      CONTENT_PATH=$(cat $(results.content-path.path))
      PIPELINE_DIR=$(dirname "$CONTENT_PATH")
      METADATA_PATH="$PIPELINE_DIR/metadata"

      echo "Content Path: $CONTENT_PATH"
      echo "Metadata Path: $METADATA_PATH"
      
      # Validate workspace structure
      if [ ! -d "$CONTENT_PATH" ]; then
        echo "‚ùå Content directory not found: $CONTENT_PATH"
        exit 1
      fi
      
      if [ ! -f "$METADATA_PATH/workflow-info.json" ]; then
        echo "‚ùå Metadata file not found: $METADATA_PATH/workflow-info.json"
        exit 1
      fi
      
      # Validate content based on workflow type
      WORKFLOW_TYPE=$(params.workflow-type)
      
      if [ "$WORKFLOW_TYPE" = "1" ]; then
        # Validate showroom template structure
        if [ ! -f "$CONTENT_PATH/showroom.yml" ]; then
          echo "‚ö†Ô∏è  Warning: showroom.yml not found (may be created by agents)"
        fi
        
        if [ -d "$CONTENT_PATH/content" ]; then
          echo "‚úÖ Antora content directory found"
        else
          echo "‚ö†Ô∏è  Warning: Antora content directory not found (may be created by agents)"
        fi
        
      else
        # Validate original workshop structure
        echo "‚úÖ Original workshop content validated"
      fi
      
      # Display metadata
      echo ""
      echo "üìã Workspace Metadata:"
      cat "$METADATA_PATH/workflow-info.json" | head -10
      
      echo ""
      echo "‚úÖ Workspace validation completed"
      echo "üöÄ Workspace ready for agent operations"
