/**
 * Environment analysis utilities using prompt-driven AI analysis
 * Implements intelligent environment context analysis and compliance assessment
 */
export interface EnvironmentFile {
    filename: string;
    content: string;
    path: string;
    type: 'dockerfile' | 'compose' | 'kubernetes' | 'terraform' | 'config' | 'other';
}
export interface ContainerizationAnalysis {
    detected: boolean;
    technology: string;
    maturity: string;
    orchestration: string;
    dockerfiles: any[];
    composeFiles: any[];
    kubernetesManifests: any[];
    buildConfiguration: any;
    resourceManagement: any;
    bestPractices: any;
    recommendations: any[];
    securityFindings: any[];
}
export interface EnvironmentRequirements {
    infrastructure: any;
    platform: any;
    security: any;
    performance: any;
    operationalRequirements: any;
    gaps: any[];
    recommendations: any[];
}
export interface ComplianceAssessment {
    overallScore: number;
    assessmentDate: string;
    riskLevel: string;
    complianceStatus: string;
    categoryScores: any;
    complianceDetails: any[];
    violations: any[];
    strengths: any[];
    recommendations: any[];
    improvementPlan: any;
    riskAssessment: any;
    complianceMetrics: any;
}
/**
 * Analyze system environment specifications
 */
export declare function analyzeEnvironmentSpecs(projectPath?: string): Promise<{
    analysisPrompt: string;
    instructions: string;
}>;
/**
 * Detect containerization technologies
 */
export declare function detectContainerization(projectPath?: string): Promise<{
    detectionPrompt: string;
    instructions: string;
}>;
/**
 * Determine environment requirements from ADRs
 */
export declare function determineEnvironmentRequirements(adrDirectory?: string): Promise<{
    requirementsPrompt: string;
    instructions: string;
}>;
/**
 * Assess environment compliance
 */
export declare function assessEnvironmentCompliance(currentEnvironment: any, requirements: any, industryStandards?: string[]): Promise<{
    compliancePrompt: string;
    instructions: string;
}>;
//# sourceMappingURL=environment-analysis.d.ts.map