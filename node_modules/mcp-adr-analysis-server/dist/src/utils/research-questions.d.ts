/**
 * Research question generation utilities using prompt-driven AI analysis
 * Implements intelligent research question generation and task tracking
 */
export interface ResearchProblem {
    id: string;
    description: string;
    category: string;
    severity: string;
    context: string;
}
export interface KnowledgeGraph {
    technologies: Array<{
        name: string;
        description?: string;
        category?: string;
    }>;
    patterns: Array<{
        name: string;
        description?: string;
        category?: string;
    }>;
    adrs: Array<{
        id: string;
        title: string;
        status: string;
        content?: string;
    }>;
    relationships: Array<{
        source: string;
        target: string;
        type: string;
    }>;
}
export interface ResearchContext {
    topic: string;
    category: string;
    scope: string;
    objectives: string[];
    constraints?: string[];
    timeline?: string;
}
export interface ResearchQuestion {
    id: string;
    question: string;
    type: string;
    priority: string;
    complexity: string;
    timeline: string;
    methodology: string;
    expectedOutcome: string;
    successCriteria: string[];
    relatedKnowledge: string[];
    resources: string[];
    risks: string[];
    dependencies: string[];
}
/**
 * Correlate problems with knowledge graph
 */
export declare function correlateProblemKnowledge(problems: ResearchProblem[], knowledgeGraph: KnowledgeGraph): Promise<{
    correlationPrompt: string;
    instructions: string;
}>;
/**
 * Find relevant ADRs and patterns for research context
 */
export declare function findRelevantAdrPatterns(researchContext: ResearchContext, adrDirectory?: string): Promise<{
    relevancePrompt: string;
    instructions: string;
}>;
/**
 * Generate context-aware research questions
 */
export declare function generateContextAwareQuestions(researchContext: ResearchContext, relevantKnowledge: {
    adrs: any[];
    patterns: any[];
    gaps: any[];
    opportunities: any[];
}, projectPath?: string): Promise<{
    questionPrompt: string;
    instructions: string;
}>;
/**
 * Create research task tracking system
 */
export declare function createResearchTaskTracking(researchQuestions: ResearchQuestion[], currentProgress?: Array<{
    questionId: string;
    status: string;
    progress: number;
    findings: string[];
    blockers: string[];
}>): Promise<{
    trackingPrompt: string;
    instructions: string;
}>;
//# sourceMappingURL=research-questions.d.ts.map