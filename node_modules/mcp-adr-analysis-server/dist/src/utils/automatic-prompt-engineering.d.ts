/**
 * Automatic Prompt Engineering (APE) Utility Module - 100% Prompt-Driven Architecture
 * Generates AI delegation prompts for automatic prompt optimization and evaluation
 * All functions return prompts for AI execution, never execute operations directly
 */
import { APEConfig, GenerationStrategy, EvaluationCriterion, SelectionStrategy, PromptCandidate, ToolOptimizationConfig } from '../types/ape-framework.js';
import { PromptObject } from './prompt-composition.js';
/**
 * Generate AI delegation prompt for automatic prompt optimization
 * Returns prompts for AI to optimize the given prompt using APE techniques
 */
export declare function optimizePromptWithAPE(originalPrompt: PromptObject, config?: Partial<APEConfig>): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for prompt candidate generation
 * Returns prompts for AI to generate multiple prompt variations
 */
export declare function generatePromptCandidates(basePrompt: PromptObject, strategies: GenerationStrategy[], candidateCount: number): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for prompt performance evaluation
 * Returns prompts for AI to evaluate prompt effectiveness using multiple criteria
 */
export declare function evaluatePromptPerformance(candidates: PromptCandidate[], evaluationCriteria: EvaluationCriterion[], context?: any): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for tool-specific prompt optimization
 * Returns prompts for AI to optimize prompts for specific MCP tools
 */
export declare function optimizeToolPrompt(toolName: string, basePrompt: PromptObject, toolConfig: ToolOptimizationConfig): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate cache key for APE optimization requests
 */
export declare function generateAPECacheKey(promptHash: string, config: APEConfig): string;
/**
 * Get default APE configuration
 */
export declare function getDefaultAPEConfig(): Required<APEConfig>;
/**
 * Validate APE configuration
 */
export declare function validateAPEConfig(config: Partial<APEConfig>): void;
/**
 * Get supported generation strategies
 */
export declare function getSupportedGenerationStrategies(): GenerationStrategy[];
/**
 * Get supported evaluation criteria
 */
export declare function getSupportedEvaluationCriteria(): EvaluationCriterion[];
/**
 * Get supported selection strategies
 */
export declare function getSupportedSelectionStrategies(): SelectionStrategy[];
/**
 * Create tool-specific APE configuration
 */
export declare function createToolAPEConfig(toolName: string, customConfig?: Partial<APEConfig>): APEConfig;
//# sourceMappingURL=automatic-prompt-engineering.d.ts.map