/**
 * Reflexion Utility Module - 100% Prompt-Driven Architecture
 * Implements Actor-Evaluator-Self-Reflection pattern for continuous learning
 * All functions return prompts for AI execution, never execute operations directly
 */
import { ReflexionConfig, ReflexionMemory, MemoryType, EvaluationCriterion, ReflectionDepth, MemoryQuery } from '../types/reflexion-framework.js';
import { PromptObject } from './prompt-composition.js';
/**
 * Generate AI delegation prompt for executing a task with reflexion learning
 * Returns prompts for AI to execute tasks with memory-enhanced context
 */
export declare function executeWithReflexion(basePrompt: PromptObject, config?: Partial<ReflexionConfig>): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for retrieving relevant memories
 * Returns prompts for AI to search and retrieve relevant past experiences
 */
export declare function retrieveRelevantMemories(taskType: string, context: any, query?: Partial<MemoryQuery>): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for persisting reflexion memories
 * Returns prompts for AI to save memories using file system operations
 */
export declare function persistReflexionMemory(memory: ReflexionMemory): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate AI delegation prompt for tracking learning progress
 * Returns prompts for AI to analyze and report learning progress
 */
export declare function getLearningProgress(taskType: string): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate cache key for reflexion requests
 */
export declare function generateReflexionCacheKey(promptHash: string, config: ReflexionConfig): string;
/**
 * Get default reflexion configuration
 */
export declare function getDefaultReflexionConfig(): Required<ReflexionConfig>;
/**
 * Validate reflexion configuration
 */
export declare function validateReflexionConfig(config: Partial<ReflexionConfig>): void;
/**
 * Get supported memory types
 */
export declare function getSupportedMemoryTypes(): MemoryType[];
/**
 * Get supported evaluation criteria
 */
export declare function getSupportedEvaluationCriteria(): EvaluationCriterion[];
/**
 * Get supported reflection depths
 */
export declare function getSupportedReflectionDepths(): ReflectionDepth[];
/**
 * Create tool-specific reflexion configuration
 */
export declare function createToolReflexionConfig(toolName: string, customConfig?: Partial<ReflexionConfig>): ReflexionConfig;
/**
 * Generate memory ID for new memories
 */
export declare function generateMemoryId(memoryType: MemoryType, category: string): string;
/**
 * Calculate memory expiration date
 */
export declare function calculateMemoryExpiration(retentionDays: number, importance?: 'low' | 'medium' | 'high' | 'critical'): string;
/**
 * Create memory query from context
 */
export declare function createMemoryQuery(taskType: string, context: any, options?: Partial<MemoryQuery>): MemoryQuery;
/**
 * Enhance prompt with memory context
 */
export declare function enhancePromptWithMemories(basePrompt: PromptObject, memories: ReflexionMemory[]): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
//# sourceMappingURL=reflexion.d.ts.map