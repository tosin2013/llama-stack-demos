/**
 * Deployment analysis utilities using prompt-driven AI analysis
 * Implements intelligent deployment progress tracking and completion verification
 */
export interface DeploymentTask {
    taskId: string;
    taskName: string;
    description: string;
    category: 'infrastructure' | 'application' | 'cicd' | 'operational';
    priority: 'critical' | 'high' | 'medium' | 'low';
    status: 'not_started' | 'in_progress' | 'completed' | 'blocked' | 'failed';
    progress: number;
    verificationCriteria: string[];
    expectedOutcome: string;
    sourceAdr?: string;
}
export interface OutcomeRule {
    ruleId: string;
    description: string;
    criteria: string[];
    verificationMethod: string;
}
export interface DeploymentProgress {
    overallProgress: number;
    categoryProgress: Record<string, number>;
    criticalPath: {
        tasks: string[];
        progress: number;
        bottlenecks: string[];
    };
    estimatedCompletion: string;
    riskLevel: 'low' | 'medium' | 'high' | 'critical';
}
/**
 * Identify deployment tasks from ADRs and todo content
 */
export declare function identifyDeploymentTasks(adrDirectory?: string, todoPath?: string): Promise<{
    identificationPrompt: string;
    instructions: string;
}>;
/**
 * Analyze CI/CD logs and pipeline status
 */
export declare function analyzeCiCdStatus(cicdLogs: string, pipelineConfig?: string, deploymentTasks?: DeploymentTask[]): Promise<{
    analysisPrompt: string;
    instructions: string;
}>;
/**
 * Calculate deployment progress
 */
export declare function calculateDeploymentProgress(deploymentTasks: DeploymentTask[], cicdStatus?: any, environmentStatus?: any): Promise<{
    progressPrompt: string;
    instructions: string;
}>;
/**
 * Verify deployment completion with outcome rules
 */
export declare function verifyDeploymentCompletion(deploymentTasks: DeploymentTask[], outcomeRules: OutcomeRule[], actualOutcomes?: Array<{
    taskId: string;
    outcome: string;
    evidence: string[];
    timestamp: string;
}>): Promise<{
    verificationPrompt: string;
    instructions: string;
}>;
//# sourceMappingURL=deployment-analysis.d.ts.map