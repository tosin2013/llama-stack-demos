/**
 * Caching system for MCP resources and expensive operations
 * Implements prompt-driven caching with TTL and invalidation through AI delegation
 */
export interface CacheOptions {
    ttl?: number;
    invalidateOnChange?: boolean;
    compression?: boolean;
}
/**
 * Generate prompt for AI-driven cache directory initialization
 */
export declare function initializeCache(): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache data storage
 */
export declare function setCache<T>(key: string, data: T, options?: CacheOptions): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache data retrieval
 */
export declare function getCache(key: string): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache validity check
 */
export declare function hasValidCache(key: string): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache entry invalidation
 */
export declare function invalidateCache(key: string): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache clearing
 */
export declare function clearCache(): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache statistics collection
 */
export declare function getCacheStats(): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache cleanup (remove expired entries)
 */
export declare function cleanupCache(): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
/**
 * Generate prompt for AI-driven cache-or-generate operation
 * Note: This function now returns prompts for AI delegation instead of executing cache operations directly
 */
export declare function getCachedOrGenerate<T>(key: string, _generator: () => Promise<T>, options?: CacheOptions): Promise<{
    prompt: string;
    instructions: string;
    context: any;
}>;
//# sourceMappingURL=cache.d.ts.map