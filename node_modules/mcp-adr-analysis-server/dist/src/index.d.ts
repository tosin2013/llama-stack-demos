#!/usr/bin/env node
/**
 * MCP ADR Analysis Server
 * Main entry point for the Model Context Protocol server
 *
 * This server provides Tools, Resources, and Prompts for analyzing
 * Architectural Decision Records and project architecture.
 */
/**
 * Main server class
 */
export declare class McpAdrAnalysisServer {
    private server;
    private maskingConfig;
    private config;
    private logger;
    constructor();
    /**
     * Validate configuration and project setup
     */
    private validateConfiguration;
    /**
     * Public health check method for testing
     */
    healthCheck(): Promise<void>;
    /**
     * Setup MCP protocol handlers
     */
    private setupHandlers;
    /**
     * Tool implementations
     */
    private checkAIExecutionStatus;
    private getWorkflowGuidance;
    private getDevelopmentGuidance;
    private analyzeProjectEcosystem;
    private getArchitecturalContext;
    private generateAdrsFromPrd;
    private generateAdrTodo;
    /**
     * Content masking tool implementations
     */
    private analyzeContentSecurity;
    private generateContentMasking;
    private configureCustomPatterns;
    private applyBasicContentMasking;
    private validateContentMasking;
    private manageCache;
    private configureOutputMasking;
    /**
     * Helper method to get domains based on PRD type
     */
    private getPrdTypeDomains;
    /**
     * Helper method to get domains for ecosystem analysis based on technology focus
     */
    private getEcosystemAnalysisDomains;
    /**
     * Helper method to create base ADR generation prompt
     */
    private createBaseAdrPrompt;
    /**
     * ADR suggestion tool implementations
     */
    private suggestAdrs;
    private generateAdrFromDecision;
    private discoverExistingAdrs;
    /**
     * Research integration tool implementations
     */
    private incorporateResearch;
    private createResearchTemplate;
    private requestActionConfirmation;
    /**
     * Rule generation and validation tool implementations
     */
    private generateRules;
    private validateRules;
    private createRuleSet;
    /**
     * Environment analysis tool implementation
     */
    private analyzeEnvironment;
    /**
     * Research question generation tool implementation
     */
    private generateResearchQuestions;
    /**
     * Deployment analysis tool implementation
     */
    private analyzeDeploymentProgress;
    /**
     * Apply content masking to MCP response
     */
    private applyOutputMasking;
    /**
     * Read MCP resource with prompt-driven caching
     */
    private readResource;
    /**
     * Start the server
     */
    start(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map