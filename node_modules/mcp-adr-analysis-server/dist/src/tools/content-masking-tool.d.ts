/**
 * MCP Tool for content masking and sensitive information detection
 * Implements prompt-driven security analysis
 */
/**
 * Analyze content for sensitive information
 */
export declare function analyzeContentSecurity(args: {
    content: string;
    contentType?: 'code' | 'documentation' | 'configuration' | 'logs' | 'general';
    userDefinedPatterns?: string[];
}): Promise<any>;
/**
 * Generate masking instructions for detected sensitive content
 */
export declare function generateContentMasking(args: {
    content: string;
    detectedItems: Array<{
        type: string;
        category?: string;
        content: string;
        startPosition: number;
        endPosition: number;
        confidence?: number;
        reasoning?: string;
        severity: string;
        suggestedMask?: string;
    }>;
    maskingStrategy?: 'full' | 'partial' | 'placeholder' | 'environment';
}): Promise<any>;
/**
 * Configure custom sensitive patterns for a project
 */
export declare function configureCustomPatterns(args: {
    projectPath: string;
    existingPatterns?: string[];
}): Promise<any>;
/**
 * Apply basic masking (fallback when AI is not available)
 */
export declare function applyBasicContentMasking(args: {
    content: string;
    maskingStrategy?: 'full' | 'partial' | 'placeholder';
}): Promise<any>;
/**
 * Validate that content masking was applied correctly
 */
export declare function validateContentMasking(args: {
    originalContent: string;
    maskedContent: string;
}): Promise<any>;
//# sourceMappingURL=content-masking-tool.d.ts.map